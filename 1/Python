def Nand(a, b):
    return 1 if not (a and b) else 0

def Not(a):
    return Nand(a, a)

def And(a, b):
    return Not(Nand(a, b))

def Or(a, b):
    return Nand(Not(a), Not(b))

def Xor(a, b):
    return And(Or(a, b), Nand(a, b))

def Nor(a, b):
    return Not(Or(a, b))

def Xnor(a, b):
    return Not(Xor(a, b))

def Mux(a, b, sel):
    return Or(And(a, Not(sel)), And(b, sel))

def DMux(inp, sel):
    return (And(inp, Not(sel)), And(inp, sel))

def Not16(a):
    return tuple(Not(bit) for bit in a)

def And16(a, b):
    return tuple(And(bit_a, bit_b) for bit_a, bit_b in zip(a, b))

def Or16(a, b):
    return tuple(Or(bit_a, bit_b) for bit_a, bit_b in zip(a, b))

def Mux16(a, b, sel):
    return tuple(Mux(bit_a, bit_b, sel) for bit_a, bit_b in zip(a, b))

def Or8Way(a):
    return Or(a[0], Or(a[1], Or(a[2], Or(a[3], Or(a[4], Or(a[5], Or(a[6], a[7])))))))

def DMux4Way(inp, sel):
    a, b = DMux(inp, sel[1])
    c, d = DMux(a, sel[0])
    e, f = DMux(b, sel[0])
    return c, d, e, f

def DMux8Way(inp, sel):
    a, b, c, d = DMux4Way(inp, sel[1:])
    e, f = DMux(a, sel[0])
    g, h = DMux(b, sel[0])
    i, j = DMux(c, sel[0])
    k, l = DMux(d, sel[0])
    return e, f, g, h, i, j, k, l

def Mux4Way16(a, b, c, d, sel):
    return Mux16(Mux16(a, b, sel[0]), Mux16(c, d, sel[0]), sel[1])

def Mux8Way16(a, b, c, d, e, f, g, h, sel):
    return Mux16(Mux4Way16(a, b, c, d, sel[:2]), Mux4Way16(e, f, g, h, sel[:2]), sel[2])

def verify_logic_gate(logic_gate, truth_table):
    for inputs, expected_output in truth_table.items():
        if isinstance(inputs, int):
            actual_output = logic_gate(inputs)
        else:
            actual_output = logic_gate(*inputs)
        if actual_output != expected_output:
            print(f"Test failed for inputs {inputs}: expected {expected_output}, got {actual_output}")
            return False
    print("All tests passed!")
    return True

# Pruebas de verdad
True_Table_NOT = { 0: 1, 1: 0 }
True_Table_AND = {(0, 0): 0, (0, 1): 0, (1, 0): 0, (1, 1): 1}
True_Table_OR = {(0, 0): 0, (0, 1): 1, (1, 0): 1, (1, 1): 1}
True_Table_XOR = {(0, 0): 0, (0, 1): 1, (1, 0): 1, (1, 1): 0}
True_Table_NAND = {(0, 0): 1, (0, 1): 1, (1, 0): 1, (1, 1): 0}
True_Table_NOR = {(0, 0): 1, (0, 1): 0, (1, 0): 0, (1, 1): 0}
True_Table_XNOR = {(0, 0): 1, (0, 1): 0, (1, 0): 0, (1, 1): 1}
True_Table_Mux = {(0, 0, 0): 0, (0, 0, 1): 0, (0, 1, 0): 1, (0, 1, 1): 1, (1, 0, 0): 0, (1, 0, 1): 1, (1, 1, 0): 0, (1, 1, 1): 1}
True_Table_Dmux = {(0, 0): (0, 0), (0, 1): (0, 0), (1, 0): (1, 0), (1, 1): (0, 1)}

verify_logic_gate(Xor, True_Table_XOR)
